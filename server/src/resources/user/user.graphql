enum GenderTypeEnum {
	male
	female
	other
	not to mention
}
enum SubscriptionTypeEnum {
	free
	starter
	premium
}
enum AccountTypeEnum {
	provider
	seeker
}
type ContactInfo {
	no: String!
	code: String!
}
type SocialUrls {
	facebook: String
	google: String
	twitter: String
	github: String
	instagram: String
	personal: String
}
type Status {
	status: Boolean
}
type Notifications {
	job_posting: Status!
	company_promotion: Status!
	message: Status!
	mail: Status!
	comment: Status!
}
type Account {
	account_type: AccountTypeEnum!
	subscription_type: SubscriptionTypeEnum!
}
type User {
	_id: ID!
	firstname: String!
	lastname: String!
	gender: GenderTypeEnum
	dob: String
	username: String!
	email: String!
	password: String!
	skills: [String!]
	phone: ContactInfo
	address: String!
	location: String
	profile_picture: String
	verified: Boolean!
	social_urls: SocialUrls!
	notifications: Notifications
	account: Account!
	created_at: String!
	updated_at: String!
}
type PasswordReset {
	token: String
	confirm: Boolean
}
type UserResult implements Result {
	status: Boolean!
	message: String!
	user: User
}
type TokenResult implements Result {
	status: Boolean!
	message: String!
	token: String
}
extend type Query {
	currentUser: User!
	getUser(id: ID!): User
	getUsers(ids: [ID!]!): [User!]
	checkEmail(email: String!): UserResult!
	checkUser(username: String!): UserResult!
	notification(id: ID!): Notifications
}
input AccountTypeInput {
	account_type: AccountTypeEnum!
	subscription_type: SubscriptionTypeEnum!
}
input UserSignupCredInput {
	firstname: String!
	lastname: String!
	gender: GenderTypeEnum!
	username: String!
	email: String!
	password: String!
	account: AccountTypeInput!
}
input UserLoginCredInput {
	username: String
	email: String
	password: String!
}
input UserCheckInput {
	email: String
	username: String
}
input TokenInput {
	token: String!
	email: String
	username: String
}
input ResetPasswordInput {
	token: String!
	email: String
	username: String
	password: String!
	againPassword: String!
}
input ContactInfoInput {
	no: String!
	code: String!	
}
input SocialUrlsInput {
	facebook: String
	google: String
	twitter: String
	github: String
	instagram: String
	personal: String
}
input StatusInput {
	status: Boolean
}
input NotificationsInput {
	job_posting: StatusInput
	company_promotion: StatusInput
	message: StatusInput
	mail: StatusInput
	comment: StatusInput
}
input UpdateProfileInput {
	firstname: String
	lastname: String
	skills: [String!]
	phone: ContactInfoInput
	address: String
	location: String
	profile_picture: String
	social_urls: SocialUrlsInput
	notifications: NotificationsInput
}
extend type Mutation {
	signup(input: UserSignupCredInput!): UserResult!
	login(input: UserLoginCredInput!): UserResult!
	passwordToken(input: UserCheckInput!): TokenResult!
	confirmToken(input: TokenInput!): TokenResult!
	resetPassword(input: ResetPasswordInput!): UserResult!
	changeIdentity(input: UserCheckInput!): UserResult!
	updateProfile(input: UpdateProfileInput!): UserResult!
}